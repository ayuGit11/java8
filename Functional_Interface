Such interface which contains single abstract method(SAM) is functional interface.
eg: Runnable        run()
    Comparable      compareTo()
    Comparator      compare()
    ActionListener  actionPerformed()
    Callable        call()

---> Functional interface can contain as many default methods and static methods but it contains only single abstract method.
---> @Functional Intereface  : we can use to tell explictly that the interface is functional interface and if we doing any mistake then it will tell us.

eg:   @Functional Intereface //optinal
      interface interf{
        public void m1();
        default void m2(){
        }
        public static void m3(){
        }
     }


eg:   @Functional Intereface
      interface A{
        public void m1(); -------
      }                          |
      @Functional Intereface     |   overridden valid functional interface
      interface B extends A{     | 
        public void m1(); -------
      }


  Before java8                                                        After java8
                                                  |
interface interf{                                 |            interface interf{
    public void m1();                             |                   public void m1();
}                                                 |            }
class demo implements interf{                     |            class test{
   public void m1(){                              |                  public static void main(String args[]){
      System.out.println("Hello");                |                       interf i = ()->System.out.println("Hello");
   }                                              |                       i.m1();
}                                                 |                    }
class test{                                       |            }
   public static void main(String args[]){        |
      demo d = new demo();                        |
      d.m1();                                     |
  }                                               |
}                                                 |




  Before java8                                                        After java8
                                                  |
interface interf{                                 |            interface interf{
    public int add(int a,int b);                  |                 public int add(int a,int b);
}                                                 |            }
class demo implements interf{                     |            class test{
   public int add(int a,int b){                   |                public static void main(String args[]){
        return a+b;                               |                       interf i = (a,b)->a+b;
   }                                              |                       System.out.println(i.m1());
}                                                 |                    }
class test{                                       |            }
   public static void main(String args[]){        |
      demo d = new demo();                        |
      System.out.println(d.m1());                 |
  }                                               |
}                                                 |


----> In multithreading concept we can use lamda expression.                   
                                                                     by using lamda expression 

eg: class MyRunnable implements Runnable{                |  class Test{
        public void run(){                               |        public static void main(String args[]){
             System.out.println("Child thread");         |          Runnable r = ()->{
        }                                                |                          for(int i=0;i<10;i++){
    }                                                    |                             System.out.println("child class");
    class Test{                                          |                          }
       public static void main(String args[]){           |                         };
         MyRunnable r = new MyRunnable();                |         Thread t = new Thread(r);
         Thread t = new Thread();                        |         t.start();
         t.start();                                      |         for(int i=0;i<10;i++){
         for(int i=0;i<10;i++){                          |            System.out.println("Main Thread");
             System.out.println("Main Thread");          |         }
         }                                               |       } 
      }                                                  |    }
   }                                                     |

----> In collections also we can use lamda expression.

import java.util.ArrayList;  
import java.util.Collections;  
import java.util.List;  
class Product{  
    int id;  
    String name;  
    float price;  
    public Product(int id, String name, float price) {  
        super();  
        this.id = id;  
        this.name = name;  
        this.price = price;  
    }  
}  
public class LambdaExpressionExample10{  
    public static void main(String[] args) {  
        List<Product> list=new ArrayList<Product>();  
          
        //Adding Products  
        list.add(new Product(1,"HP Laptop",25000f));  
        list.add(new Product(3,"Keyboard",300f));  
        list.add(new Product(2,"Dell Mouse",150f));  
          
        System.out.println("Sorting on the basis of name...");  
  
        // implementing lambda expression  
        Collections.sort(list,(p1,p2)->{  
        return p1.name.compareTo(p2.name);  
        });  
        for(Product p:list){  
            System.out.println(p.id+" "+p.name+" "+p.price);  
        }  
  
    }  
}      

